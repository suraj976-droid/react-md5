import axios from "axios";
import React, { useEffect, useState } from "react";
import { FaPencilAlt, FaTrash } from "react-icons/fa";
import { Base_Url } from "../../Utils/Base_Url";
import Franchisemaster from '../Master/Franchisemaster';
import { useParams } from "react-router-dom";
import md5 from 'md5'; // Import MD5 library - you'll need to install this

const Childfranchisemaster = () => {
  // ... (keep all other existing code until handleSubmit)

  const handleSubmit = async (e) => {
    e.preventDefault();

    const validationErrors = validateForm();
    if (Object.keys(validationErrors).length > 0) {
      console.log("Validation Errors:", validationErrors);
      setErrors(validationErrors);
      return;
    }
    setDuplicateError("");

    try {
      const confirmSubmission = window.confirm(
        "Do you want to submit the data?"
      );
      if (confirmSubmission) {
        // Create a copy of formData with hashed password
        const hashedFormData = {
          ...formData,
          password: md5(formData.password) // Hash the password using MD5
        };

        if (isEdit) {
          await axios
            .put(`${Base_Url}/putchildfranchise`, { ...hashedFormData, created_by })
            .then((response) => {
              setFormData({
                title: "",
                pfranchise_id: "",
                contact_person: "",
                email: "",
                mobile_no: "",
                password: "",
                country_id: "",
                region_id: "",
                state: "",
                area: "",
                city: "",
                pincode_id: "",
                address: "",
                licare_code: "",
                partner_name: "",
                website: "",
                gst_number: "",
                pan_number: "",
                bank_name: "",
                bank_account_number: "",
                bank_ifsc_code: "",
                bank_address: "",
                last_working_date: "",
                contract_activation_date: "",
                contract_expiration_date: "",
                with_liebherr: ""
              });
              fetchUsers();
              setIsEdit(false);
            })
            .catch((error) => {
              if (error.response && error.response.status === 409) {
                setDuplicateError(
                  "Duplicate entry, Child Franchise already exists!"
                );
              }
            });
        } else {
          await axios.post(`${Base_Url}/postchildfranchise`, { ...hashedFormData, created_by })
            .then((response) => {
              setFormData({
                title: "",
                pfranchise_id: "",
                contact_person: "",
                email: "",
                mobile_no: "",
                password: "",
                country_id: "",
                region_id: "",
                state: "",
                area: "",
                city: "",
                pincode_id: "",
                address: "",
                licare_code: "",
                partner_name: "",
                website: "",
                gst_number: "",
                pan_number: "",
                bank_name: "",
                bank_account_number: "",
                bank_ifsc_code: "",
                bank_address: "",
                last_working_date: "",
                contract_activation_date: "",
                contract_expiration_date: "",
                with_liebherr: ""
              });
              fetchUsers();
            })
            .catch((error) => {
              if (error.response && error.response.status === 409) {
                setDuplicateError(
                  "Duplicate entry, Child Franchise already exists!"
                );
              }
            });
        }
      }
    } catch (error) {
      console.error("Error during form submission:", error);
    }
  };

  // ... (keep all remaining code the same)

  return (
    // ... (keep the entire return statement the same)
  );
};

export default Childfranchisemaster;